
        private void SerialPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            byte[] buffer = new byte[serialPort.BytesToRead];
            int  len = serialPort.Read(buffer, 0, serialPort.BytesToRead);

            //Console.Write("HEX:{0}>>", len);
            //for(var i = 0; i < buffer.Length; i ++)
            //    Console.Write("{0:X2} ", buffer[i]);
            //Console.WriteLine();

            List<byte> buf = new List<byte>(buffer);

            while(buf.Count > 3)
            {
                IModbusMessage message = CreateModbusMessage(buf.ToArray());
                if (message == null) break;

                int length = message.MessageFrame.Length + 2;
                Console.Write("{0}>>", length);
                for (var i = 0; i < length; i++)
                    Console.Write("{0:X2} ", buf[i]);
                Console.WriteLine();
                Console.WriteLine(message);
                Console.WriteLine("SlaveAddress:{0}, FunctionCode:{1}", message.SlaveAddress, message.FunctionCode);

                if (message is IModbusRequest)  //IModbusMessage Request
                {
                    
                }
                else    //IModbusMessage Response
                {                    
                    ReadCoilsInputsResponse response = (ReadCoilsInputsResponse)message;

                    bool[] values = new bool[response.Data.Count];
                    response.Data.CopyTo(values, 0);
                }

                buf.RemoveRange(0, length);
            }

            buf.Clear();
        }


        public static IModbusMessage CreateModbusMessage(byte[] frame)
        {
            if (frame.Length < 3)
                throw new FormatException(string.Format("Argument 'frame' must have a length of at least {0} bytes.", 3));

            IModbusMessage message = null;

            byte functionCode = frame[1];
            switch (frame[1])
            {
                case 1:
                case 2:
                    try
                    {
                        message = ModbusMessageFactory.CreateModbusMessage<ReadCoilsInputsRequest>(frame);
                    }
                    catch (Exception ex)
                    {
                        message = ModbusMessageFactory.CreateModbusMessage<ReadCoilsInputsResponse>(frame);
                    }
                    return message;
                case 3:
                case 4:
                    try
                    {
                        message = ModbusMessageFactory.CreateModbusMessage<ReadHoldingInputRegistersRequest>(frame);
                    }
                    catch(Exception ex)
                    {
                        message = ModbusMessageFactory.CreateModbusMessage<ReadHoldingInputRegistersResponse>(frame);
                    }
                    return message;
                case 5:
                    return ModbusMessageFactory.CreateModbusMessage<WriteSingleCoilRequestResponse>(frame);
                case 6:
                    return ModbusMessageFactory.CreateModbusMessage<WriteSingleRegisterRequestResponse>(frame);
                case 7:
                case 8:
                    //return ModbusMessageFactory.CreateModbusMessage<DiagnosticsRequestResponse>(frame);
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                    break;
                
                case 15:
                    try
                    {
                        message = ModbusMessageFactory.CreateModbusMessage<WriteMultipleCoilsRequest>(frame);
                    }
                    catch(Exception ex)
                    {
                        message = ModbusMessageFactory.CreateModbusMessage<WriteMultipleCoilsResponse>(frame);
                    }
                    return message; //ModbusMessageFactory.CreateModbusMessage<WriteMultipleRegistersRequest>(frame);
                default:
                    if (frame[1] == 23)
                        return ModbusMessageFactory.CreateModbusMessage<ReadWriteMultipleRegistersRequest>(frame);
                    break;
            }

            throw new ArgumentException(string.Format("Unsupported function code {0}", frame[1], "frame"));
        }
        
